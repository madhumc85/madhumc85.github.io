'use strict';/*------------------------------------*\
    aaSwiper
\*------------------------------------*/(function($){$.fn.aaSwiper=function(options){var self={};self.source=this;var _prevText=AAcom.prototype.getProperty('slider.previousText');var _nextText=AAcom.prototype.getProperty('slider.nextText');self.initSwiper=function(){self.containerObject=self.source.find('.swiper-container');self.defaults=$.extend({addPagination:false,pagination:'.swiper-pagination',paginationClickable:true,slidesPerView:1,a11y:true,prevSlideMessage:_prevText,nextSlideMessage:_nextText,spaceBetween:5,watchSlidesProgress:true,watchSlidesVisibility:true,addArrows:false,nextButton:'.swiper-button-next',prevButton:'.swiper-button-prev',type:'default',trigger:'click',selectedSlideClass:'selected-slide',selectedItem:0,selectedItemText:'',selectedItemJSClass:'js-currently-selected-text',onSelect:function onSelect(){}},options||{});_insertSwiperFeatures();_makePropertiesUnique();self.settings=$.extend(self.defaults,{onInit:function onInit(swiper){if(self.settings!==undefined){var $selectedItem=$j(swiper.slides[self.settings.selectedItem]);$selectedItem.addClass(self.settings.selectedSlideClass);if(self.settings.selectedItemText.length>0){_insertA11ySelectedItemText($selectedItem)}}_setupTabIndex(swiper);_bindSelectEvent(swiper);setTimeout(function(){swiper.onResize();if($j.isFunction(options.onInit)){options.onInit(swiper)}},200)},onTransitionEnd:function onTransitionEnd(swiper){_setupTabIndex(swiper);if($j.isFunction(options.onTransitionEnd)){options.onTransitionEnd(swiper)}}});_initializePluginCSS('/assets/css/v3/plugins/aa-swiper.css?rel=09132017');return _initializePluginJS()};var _insertSwiperFeatures=function _insertSwiperFeatures(){if(self.defaults.addArrows){_initializeArrows(self.containerObject)}if(self.defaults.addPagination){_initializePagination(self.containerObject)}};var _makePropertiesUnique=function _makePropertiesUnique(){// Setting these properties with the DOM element within the containerObject 
// makes them unique to allow mulitple instances of swiper on a single page.
self.defaults.nextButton=self.containerObject.find(self.defaults.nextButton);self.defaults.prevButton=self.containerObject.find(self.defaults.prevButton);self.defaults.pagination=self.containerObject.find(self.defaults.pagination)};var _insertA11ySelectedItemText=function _insertA11ySelectedItemText($selectedItem){var a11ySelectedTextDom='<span class="hidden-accessible '+_getSelectedItemJSClass()+'">'+self.settings.selectedItemText+'</span>';$selectedItem.find('a').prepend(a11ySelectedTextDom)};var _getSelectedItemJSClass=function _getSelectedItemJSClass(){// Add id to class to allow multiple swiper instances to have unique selected a11y text
return self.settings.selectedItemJSClass+'_'+_getId()};var _getId=function _getId(){var id=self.source.attr('id');if(!id){throw new Error('A unique id needs to be defined on source DOM element')}return id};var _initializeArrows=function _initializeArrows($containerObject){var prevArrow='<a class="direction-nav swiper-button-prev" id="swiperArrowUp_'+_getId()+'" href="#"></a>';var nextArrow='<a class="direction-nav swiper-button-next" id="swiperArrowDown_'+_getId()+'" href="#"></a>';$containerObject.prepend(prevArrow).append(nextArrow)};var _initializePagination=function _initializePagination($containerObject){$containerObject.append('<div class="swiper-pagination"></div>')};var _initializePluginJS=function _initializePluginJS(){var _deferred=$.Deferred();$.getScript('/assets/js/vendor/plugins/swiper.min.js').done(function(script,textStatus){if(self.settings.type==='tabs'){self.source.addClass('tab-carousel')}self.containerObject.show();self.containerObject.height(self.settings.height);var _mySwiperInstance=new Swiper(self.containerObject[0],self.settings);// Notify listeners that the AJAX call completed successfully.
_deferred.resolve(_mySwiperInstance)}).fail(function(jqxhr,settings,exception){// Something went wrong - notify listeners:
_deferred.reject(exception)});return _deferred.promise()};var _initializePluginCSS=function _initializePluginCSS(url){var links=document.getElementsByTagName('link'),needCSS=true;for(var i=0;i<links.length;i++){if(links&&links[i].href.indexOf(url)!==-1){needCSS=false}}if(needCSS){var ls=document.createElement('link');ls.rel='stylesheet';ls.href=url;ls.type='text/css';document.getElementsByTagName('head')[0].appendChild(ls)}};var _setupTabIndex=function _setupTabIndex(swiper){var _currentSlide=swiper.realIndex,_numberItemsVisible=swiper.params.slidesPerView,_maxItemVisible=_currentSlide+_numberItemsVisible;swiper.slides.each(function(index,value){var $self=$(this);if(index>=_currentSlide&&index<_maxItemVisible){$self.find('a').attr('tabindex',0)}else{$self.find('a').attr('tabindex',-1)}})};var _bindSelectEvent=function _bindSelectEvent(swiper){var triggerEvent=self.settings.trigger;swiper.container.on(triggerEvent,'li a',function(event){event.preventDefault();var $self=$(this);swiper.slides.removeClass(self.settings.selectedSlideClass);$self.parent('li').addClass(self.settings.selectedSlideClass);if(self.settings.selectedItemText.length>0){$j(swiper.slides.find('.'+_getSelectedItemJSClass())).remove();_insertA11ySelectedItemText($self.parent('li'))}self.settings.onSelect(this,swiper)})};return self}})(jQuery);AAcom.modules.aaSwiper=function(AAUI){var self={};if(!$j.isFunction($j.fn.aaBusy)){$j.getScript('/assets/js/plugins/jquery.aaBusy.min.js').done(function(script,textStatus){$j('.carousel-container').aaBusy({showlogo:false}).start()}).fail(function(jqxhr,settings,exception){})}else{$j('.carousel-container').aaBusy({showlogo:false}).start()}AAUI.initSwiper=function(element,options){if($j.isFunction($j.fn.aaSwiper)){self=$j(element).aaSwiper(options);if(self){var swiper=self.initSwiper()}$j('.carousel-container').aaBusy().stop();return swiper}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=jquery.aaSwiper.min.js.map
