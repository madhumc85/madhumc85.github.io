'use strict';/**
*  UI-REFACTORED
*    FROM --> ./legacy-web/src/main/js/apps/common/js/cookieconsent.js
*    TO   --> ./webapps/shared-web/src/main/assets/js/common/cookie-consent.js
**/var cookieconsentModule=function($j){//var jQueryVersionArray = $j.fn.jquery.split('.');
var loaded=false;var jQueryUILoaded=false;var aaUtilLoaded=false;var modalLocale='';// set to production
var hostNameForConsentCookieServlet='www.aa.com';var aaUtil;var DEBUG=false;function debugLog(message){if(DEBUG){console.log(message)}};function hideModal(){if(typeof aaUtil!=='undefined'){aaUtil.aaDialog('cookieConsent').closeDialog()}};function getConsentUrl(){var consentUrl=getDomainUrl()+'/shared/cookieConsent';if(modalLocale.length>0){consentUrl=consentUrl+'?locale='+modalLocale}debugLog(modalLocale);debugLog('consentUrl: '+consentUrl);return consentUrl};function bindEvents(){// Initialize aa_Utilities object
aaUtil=new aa_Utilities;// Initialize accept button
var buttonText='I accept';if(typeof acceptCookieConsentText!=='undefined'){buttonText=acceptCookieConsentText}// Set buttons if needed
var btnArray=new Array;btnArray[0]={name:buttonText,id:'cookieConsentAccept',cssClass:'btn',closeDialog:true,callback:handleCookieConsentAccept};// Initialize and set the overlay
aaUtil.aaDialog('cookieConsent',{width:575,height:'auto',buttons:btnArray,toggleScroll:false,showClose:false,closeOnEscape:false});// handles older version of jQuery before delegate exists
try{if($j.isFunction($j('body').delegate)){$j('body').delegate('#cookieConsentPolicyLink','click',cookiePolicyClickHandler)}else{$j('#cookieConsentPolicyLink').on('click',cookiePolicyClickHandler)}}catch(err){hideModal()}};function processJSON(response){var jsonResponse;// check if jQuery.parseJSON is a function, else it is jQuery v 1.3.2
if($j.isFunction($j.parseJSON)){jsonResponse=response}else if($j.isFunction(JSON.parse)){jsonResponse=JSON.parse(response)}debugLog('jsonResponse.displayFlag: '+jsonResponse.displayFlag);// debugLog("jsonResponse.htmlText: " + jsonResponse.htmlText);
// display/hide modal
if(jsonResponse.displayFlag==='1'){// append it to body
$j('body').append(jsonResponse.htmlText);// bind events
bindEvents();showModal()}else{hideModal()}};function showModal(){aaUtil.aaDialog('cookieConsent').openDialog();$j('#cookieConsentDialog').parent().find('.ui-dialog-titlebar').css('marginBottom',15+'px')};function makeCorsRequest(method,value){debugLog('value: '+value);try{$j.ajax({type:method,cache:false,url:getConsentUrl(),contentType:'text/plain',xhrFields:{withCredentials:true},crossDomain:true,beforeSend:function beforeSend(xhr){// for older versions of jQuery
xhr.withCredentials=true;debugLog('beforeSend - value: '+value);xhr.setRequestHeader('consentcookieheader',value);xhr.setRequestHeader('X-Requested-With','XMLHttpRequest')},success:function success(xhr){if(method==='GET'){processJSON(xhr)}},error:function error(){debugLog('There is an error');hideModal()}})}catch(err){debugLog(err);hideModal()}};function processConsent(){debugLog('processConsent..');debugLog('$j.fn.jquery: '+$j.fn.jquery);debugLog('$j.ui.version: '+$j.ui.version);makeCorsRequest('GET')};function setConsent(value){makeCorsRequest('PUT',value?'1':'0')};// @TODO - SRL - verify this function is even necessary for getConsentUrl function
function getDomainUrl(){var domainUrl;try{var cProto=document.location.protocol=='https:'?'https://':'http://';if(location.port!=null&&location.port.length>0&&window.location.hostname.toLowerCase().indexOf('localhost')>-1){// for local env
domainUrl=cProto+window.location.hostname+':'+location.port}else{domainUrl=cProto+hostNameForConsentCookieServlet;// prod, international and lower environments
}debugLog('domainUrl: '+domainUrl)}catch(err){debugLog(err)}return domainUrl};function getAAUtils(){//var aaUtilitiesLocation;
if(typeof aa_Utilities==='undefined'&&!aaUtilLoaded){// determine which version we need to get
/*if(jQueryVersionArray.length > 2 && jQueryVersionArray[0] === '1' && jQueryVersionArray[1] > 4) {
                aaUtilitiesLocation = '/assets/js/legacy/utilities/aa-utilities-2.1.min.js';
            }else{
                aaUtilitiesLocation = '/assets/js/legacy/utilities/aa-utilities.min.js';
            }*/// get aa_Utilities
var aaUtilitiesUrl=getDomainUrl()+'/assets/js/legacy/utilities/aa-utilities-2.1.min.js';debugLog('aaUtilitiesUrl: '+aaUtilitiesUrl);loadScript(aaUtilitiesUrl,function(){aaUtilLoaded=true;debugLog('got aa_Utilities at: '+aaUtilitiesUrl);// start
processConsent()})}else{// start process
aaUtilLoaded=true;// start
processConsent()}};function checkPrerequisiteAndStartProcess(){if(typeof jQuery.ui==='undefined'&&!jQueryUILoaded){getjQueryUI()}else{// getAAUtils
jQueryUILoaded=true;getAAUtils()}};function loadScript(url,callback){$j.ajax({url:url,dataType:'script',success:callback,async:true})};function getjQueryUI(){/*var jQueryUILocation;

        // determine which version we need to get. Greater than 4, equal 4 or less than 4
        if(jQueryVersionArray.length > 2 && jQueryVersionArray[0] === '1' && jQueryVersionArray[1] > 4) {
            jQueryUILocation = '/js/libs/jquery/ui/1.10/jquery-ui.min.js';
        }else if(jQueryVersionArray.length > 2 && jQueryVersionArray[0] === '1' && jQueryVersionArray[1] === '4') {
            jQueryUILocation = '/apps/common/js/jquery/ui/1.8/jquery-ui-1.8.2.custom.min.js';
        }else{
            jQueryUILocation = '/apps/common/js/jquery/ui/jquery-ui-1.7.2.custom.min.js';
        }*/// get aa_Utilities
var jQueryUIUrl=getDomainUrl()+'/assets/js/vendor/jquery-ui.min.js';loadScript(jQueryUIUrl,function(){debugLog('got jQueryUI at: '+jQueryUIUrl);jQueryUILoaded=true;getAAUtils()})};function cookiePolicyClickHandler(){$j('#cookieConsentPolicy').toggleClass('is-hidden')};function handleCookieConsentAccept(){setConsent(true);hideModal()};function setModalLocale(locale){modalLocale=locale;debugLog('modal locale: '+locale)};function setConsentServletHost(hostName){try{if(typeof hostName!=='undefined'&&hostName.length>0&&window.location.hostname.toLowerCase().indexOf('www.aa.com')<0){hostNameForConsentCookieServlet=hostName}}catch(e){console.error(e)}debugLog('hostNameForConsentCookieServlet: '+hostName)};return{start:function start(){// check if this script has been loaded some where else before
if(loaded===false){loaded=true;try{//check prereq and start the process
checkPrerequisiteAndStartProcess()}catch(err){debugLog(err);hideModal()}}},setLocale:setModalLocale,setServiceHost:setConsentServletHost}}(jQuery);jQuery(document).ready(function(){cookieconsentModule.start()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=cookie-consent.min.js.map
